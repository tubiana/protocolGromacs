#!/bin/bash
#
# Generated by CHARMM-GUI (http://www.charmm-gui.org) v3.7 and adapted by Thibault Tubiana for a usage in BASH

# This folder contains GROMACS formatted force fields, a pre-optimized PDB structure, and GROMACS inputs.
# All input files were optimized for GROMACS 2019.2 or above, so lower version of GROMACS can cause some errors.
# We adopted the Verlet cut-off scheme for all minimization, equilibration, and production steps because it is 
# faster and more accurate than the group scheme. If you have a trouble with a performance of Verlet scheme while 
# running parallelized simulation, you should check if you are using appropriate command line.
# For MPI parallelizing, we recommend following command:
# mpirun -np $NUM_CPU $GMX mdrun -ntomp 1

SIMULATIONTIME=500

init=step5_input
rest_prefix=step5_input
mini_prefix=step6.0_minimization
equi_prefix=step6.%d_equilibration
prod_prefix=step7_production
prod_step=step7

# Minimization
$GMX grompp -f ${mini_prefix}.mdp -o ${mini_prefix}.tpr -c ${init}.gro -r ${rest_prefix}.gro -p topol.top -n index.ndx
$MDRUNmini -v -deffnm ${mini_prefix}

mkdir -p results/${mini_prefix}/
mv ${mini_prefix}.* results/${mini_prefix}/


# Equilibration
cnt=1
cntmax=6

while [ $cnt -le $cntmax ]; do
    pcnt=$((cnt - 1))
    istep=$(printf ${equi_prefix} $cnt)
    pstep=$(printf ${equi_prefix} $pcnt)
    if [ $cnt -eq 1 ]; then
        pstep=${mini_prefix}
    fi

    $GMX grompp -f ${istep}.mdp -o ${istep}.tpr -c results/${pstep}/${pstep}.gro -r ${rest_prefix}.gro -p topol.top -n index.ndx -maxwarn 2
    $MDRUN -v -deffnm ${istep}

    mkdir -p results/${istep}
    mv ${istep}.* results/${istep}/
    ((cnt++))
done


Convert the simulation time. 
python_command=$(python <<EOF
import re
restep = re.compile("nsteps *= *(\d*)")
redt = re.compile("dt *= *(\d*.\d*)")
dt = 0
simulationtime = float($SIMULATIONTIME) *1000 #Time in ps
outputLines = []
with open("step7_production.mdp",'r') as f:
    mdp = f.readlines()
    #find first the timestep
    for line in mdp: 
        dtmatch = redt.match(line)
        if dtmatch:
            dt = float(dtmatch.group(1))
            break
    for line in mdp:
        stepmatch = restep.match(line)
        if stepmatch and float(dt) > 0:
            nsteps = int(simulationtime)/dt
            line = "nsteps            = {}        ; {} * {} = {} ps or {} ns\n".format(int(nsteps),dt,nsteps, dt*nsteps, simulationtime/1000)
        outputLines.append(line)
    with open("step7_production.mdp",'w') as f:
        for line in outputLines:
            f.write(line)
EOF
)

pstep=$(printf ${equi_prefix} 6)
$GMX grompp -f step7_production.mdp -o step7_production.tpr -c results/${pstep}/${pstep}.gro -p topol.top -n index.ndx    
$MDRUN -v -deffnm step7_production

